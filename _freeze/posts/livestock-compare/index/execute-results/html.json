{
  "hash": "46c347b283f04cfa4937529fdeeb17b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Livestock density comparison\"\nauthor: \"Isaac Bain\"\ndate: \"2024-07-23\"\ncategories: [code, water quality, maps, animation]\nexecute:\n  warning: false\n  error: false\n  messages: false\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    toc: true\n    toc-location: left\n    number-sections: true\n    link-external-icon: true\n    link-external-newwindow: true\neditor: visual\nlightbox: auto\ndraft: true\ndraft-mode: unlinked\nresources: \n  - \"www/*\"\ntitle-block-banner: \"#00000000\"\ntitle-block-banner-color: \"rgba(255, 255, 255, 0.9)\"\ninclude-in-header:\n  - text: |\n      <style>\n      #title-block-header.quarto-title-block.default .quarto-title-meta {\n        color: rgba(255, 255, 255, 0.9);\n      }\n      .quarto-title-block .quarto-title-banner {\n        height: 0; /* hide */\n      }\n      #title-block-header {\n        background: \n          /* top, transparent black, faked with gradient */\n          linear-gradient(\n            rgba(0, 0, 0, 0.2),\n            rgba(0, 0, 0, 0.6)\n          ),\n          /* bottom, image */ \n          url(./cows4.jpg);\n        background-size: cover;\n        background-position-y: center;\n        height: 300px;\n        opacity: 0.7; /* image opacity, lower means lighter */\n        z-index: -1;\n      }\n      </style>\n---\n\n\n\n## Overview\n\nIt seems to be a national past-time to be obsessed with the number of livestock in New Zealand, whether you're interested in the agri-economy, environmental health, or comparing the current ratio of sheep:people.[^1]\n\n[^1]: It's 4.6 sheep per person. See <https://www.rnz.co.nz/news/country/515877/new-zealand-s-iconic-sheep-to-person-ratio-keeps-falling>\n\nIn this post, I make some visualisations which will hopefully enable a better understanding of the number\nof different animals over time and the spatial distribution of livestock across New Zealand.\n\n## Data sources\n\nThree important data series. 1. Total livestock numbers across NZ 2. Regional breakdown 3. APS hex grid breakdown\n\nDiffering levels of resolution and time series.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(mapgl)\nlibrary(koordinatr)\nlibrary(zoo)\nlibrary(gganimate)\nlibrary(scales)\nlibrary(isaacr)\nlibrary(pals)\nlibrary(magick)\n\noptions(scipen = 999)\n\n# Load the data\naps17 <- st_read(\"data/livestock-numbers-grid-aps-2017/livestock-numbers-grid-aps-2017.shp\")\naps94 <- st_read(\"data/livestock-numbers-grid-aps-1994/livestock-numbers-grid-aps-1994.shp\")\n\naps17$sheepdens[aps17$grid_id == 724] <- 0\naps17$sheepdens[aps17$grid_id == 742] <- 0\n\nlivestock_numbers_raw <- get_table_as_tibble(Sys.getenv(\"mfe_api_key\"), \"mfe\", \"105406\") |> select(-gml_id)\n\n# Read in the shapefile of regions\nregions_sf <- st_read(\"data/statsnz-regional-council-2023-clipped-generalised-SHP/regional-council-2023-clipped-generalised.shp\") |> \n  mutate(REGC2023_2 = str_replace(REGC2023_2, \" Region$\", \"\")) |> \n  st_simplify(dTolerance = 1000, preserveTopology = FALSE)\n```\n:::\n\n\n\n## Total cattle numbers in New Zealand\n\nHere's the total cattle numbers in New Zealand over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncattle_numbers <- livestock_numbers_raw |>\n  filter(geography_name == \"New Zealand\") |>\n  filter(animal %in% c(\"Beef cattle\", \"Dairy cattle\", \"Total cattle\")) |>\n  group_by(animal) |>\n  mutate(count = na.spline(count, na.rm = FALSE)) # Interpolate missing values via cubic spline interpolation\n\n# Create the plot\np <- ggplot(cattle_numbers, aes(x = year, y = count, colour = animal, group = animal)) +\n  geom_line() + \n  geom_point(size = 2) +\n  geom_text(aes(label = animal), vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Total cattle numbers in New Zealand\",\n       x = \"\",\n       y = \"Number of cattle\") + \n  theme_minimal() +\n  expand_limits(x = c(1971, 2019 + 6), y = 0) + # Expand limits on x-axis\n  theme(legend.position = \"none\") +\n  scale_y_continuous(breaks = seq(0, max(cattle_numbers$count, na.rm = TRUE), by = 1e6),\n                     labels = scales::label_number(scale = 1e-6, suffix = \"M\")) + # Format y-axis labels \n  transition_reveal(year)\n\n# Render the animation\nanimate(p,\n        nframes = 100,\n        fps = 10,\n        end_pause = 30)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.gif)\n:::\n:::\n\n\n\n## Total sheep numbers in New Zealand\n\nHere's the total sheep numbers in New Zealand over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load and prepare your data\nsheep_numbers <- livestock_numbers_raw |>\n  filter(geography_name == \"New Zealand\") |>\n  filter(animal == \"Sheep\") |>\n  group_by(animal) |>\n  mutate(count = na.spline(count, na.rm = FALSE)) # Interpolate missing values via cubic spline interpolation\n\n# Create the plot\np2 <- ggplot(sheep_numbers, aes(x = year, y = count, colour = animal, group = animal)) +\n  geom_line() +\n  geom_point(size = 2) +\n  geom_text(aes(label = animal), vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Total sheep numbers for New Zealand\",\n       x = \"\",\n       y = \"Number of sheep\") +\n  theme_minimal() +\n  expand_limits(x = c(1971, 2019 + 6), y = 0) + # Expand limits on x-axis\n  scale_y_continuous(breaks = seq(0, max(sheep_numbers$count, na.rm = TRUE), by = 1e7),\n                     labels = scales::label_number(scale = 1e-6, suffix = \"M\")) + # Format y-axis labels\n  theme(legend.position = \"none\") +\n  transition_reveal(year)\n\n# Render the animation\nanimate(p2, nframes = 100, fps = 10, end_pause = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.gif)\n:::\n:::\n\n\n\n## Total livestock numbers for New Zealand\n\nWhy not have all the animals on one graph? It masks the trends for the less numerous animals.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load and prepare your data\nlivestock_numbers <- livestock_numbers_raw  |> \n  filter(geography_name == \"New Zealand\") |>\n  group_by(animal) |>\n  mutate(count = na.spline(count, na.rm = FALSE)) |> # Interpolate missing values via cubic spline interpolation\n  filter(count > 0) # Filter out animals with zero counts\n\n# Create the plot\np3 <- ggplot(livestock_numbers, aes(x = year, y = count, colour = animal, group = animal)) +\n  geom_line() +\n  geom_point(size = 2) +\n  geom_text(aes(label = animal), vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Total livestock numbers for New Zealand\",\n       x = \"\",\n       y = \"Number of animals\") +\n  theme_minimal() +\n  expand_limits(x = c(1971, 2019 + 6), y = 0) + # Expand limits on x-axis\n  scale_y_continuous(breaks = seq(0, max(livestock_numbers$count, na.rm = TRUE), by = 1e7),\n                     labels = scales::label_number(scale = 1e-6, suffix = \"M\")) + # Format y-axis labels\n  theme(legend.position = \"none\") +\n  transition_reveal(year)\n\n# Render the animation\nanimate(p3, nframes = 100, fps = 10, end_pause = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.gif)\n:::\n:::\n\n\n\n## Total stock unit equivalents\n\nSame approach as Snelder et al. (2021) to calculate total stock unit equivalents.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstock_units_constant <- tibble(\n    year = c(2017),\n    `Sheep` = c(1.35),\n    `Beef cattle` = c(6.9),\n    `Dairy cattle` = c(8),\n    `Deer` = c(2.3)\n  )\n\n# Apply the function to the dataset\ntotal_stock_units <- livestock_numbers_raw |> \n  filter(geography_name == \"New Zealand\") |>\n  filter(animal != \"Total cattle\") |> \n  group_by(animal) |> \n  mutate(count = na.spline(count, na.rm = FALSE)) |> # Interpolate missing values via cubic spline interpolation\n  ungroup() |> \n  rowwise() %>%\n  mutate(stock_unit_equivalent = count * get_stock_unit(animal, year)) %>%\n  ungroup() |> \n  group_by(year) |> \n  summarise(total_stock_unit_equivalent = sum(stock_unit_equivalent, na.rm = TRUE))\n\n# Create the plot\np4 <- ggplot(total_stock_units, aes(x = year, y = total_stock_unit_equivalent)) +\n  geom_line() +\n  geom_point(size = 2) +\n  geom_text(label = \"Total stock units\", vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Total stock unit equivalents for New Zealand\",\n       x = \"\",\n       y = \"Number of stock units\") +\n  theme_minimal() +\n  expand_limits(x = c(1971, 2019 + 6), y = 0) + # Expand limits on x-axis\n  scale_y_continuous(breaks = seq(0, max(total_stock_units$total_stock_unit_equivalent, na.rm = TRUE), by = 5e7),\n                     labels = scales::label_number(scale = 1e-6, suffix = \"M\")) + # Format y-axis labels\n  theme(legend.position = \"none\") +\n  transition_reveal(year)\n\n# Render the animation\nanimate(p4, nframes = 100, fps = 10, end_pause = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.gif)\n:::\n:::\n\n\n\n## Regional breakdown\n\nBetween 1990 - 2019 regional breakdowns are available for livestock numbers.\n\nHere's a plot of dairy cattle numbers by region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndairy_numbers_region <- livestock_numbers_raw |>\n  filter(geography_type == \"Region\") |>\n  filter(geography_name != \"Chatham Islands\") |> \n  filter(animal == \"Dairy cattle\") |>\n  group_by(geography_name) |>\n  mutate(count = na.approx(count, rule = 2, na.rm = FALSE)) |>  # Interpolate missing values via linear interpolation\n  mutate(baseline_1990 = first(count[year == 1990])) |> \n  mutate(change_from_1990 = count - baseline_1990) |> \n  filter(count > 0) |>  # Filter out animals with zero counts |> \n  mutate(year = as.integer(year))\n\n# Create the plot\np5 <- ggplot(dairy_numbers_region, aes(x = year, y = count, colour = geography_name, group = geography_name)) +\n  geom_line() +\n  geom_point(size = 2) +\n  geom_text(aes(label = geography_name), vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Dairy cattle numbers by region\",\n       x = \"\",\n       y = \"Number of dairy cattle\") +\n  theme_minimal() +\n  expand_limits(x = c(1990, 2019 + 6), y = 0) + # Expand limits on x-axis\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = label_comma()) + # Format y-axis labels with commas\n  scale_color_manual(values = c(\"Canterbury\" = \"red\")) +\n  transition_reveal(year)\n\n# Render the animation\nanimate(p5,\n        nframes = 100,\n        fps = 10,\n        end_pause = 30)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the plot\np6 <- ggplot(dairy_numbers_region, aes(x = year, y = count, colour = geography_name, group = geography_name)) +\n  geom_line() +\n  geom_point(size = 2) +\n  geom_text(aes(label = geography_name), vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Dairy cattle numbers by region\",\n       x = \"\",\n       y = \"Number of dairy cattle\") +\n  theme_minimal() +\n  expand_limits(x = c(1990, 2019 + 6), y = 0) + # Expand limits on x-axis\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = label_comma()) + # Format y-axis labels with commas\n  scale_color_manual(values=as.vector(ocean.phase(17))) +\n  transition_reveal(year)\n\n# Render the animation\nanimate(p6, nframes = 100, fps = 10, end_pause = 30)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.gif)\n:::\n:::\n\n\n\n### Regional breakdown linked map\n\n:::{.column-page-inset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge spatial data with dairy numbers\nmap_data <- dairy_numbers_region %>%\n  left_join(regions_sf, by = c(\"geography_name\" = \"REGC2023_2\")) |> \n  filter(!is.na(LAND_AREA_)) |>  # Filter out regions with missing values |>\n  #filter(geography_name %in% c(\"Canterbury\", \"Southland\", \"Northland\", \"Waikato\", \"Bay of Plenty\")) |> \n  ungroup()\n\n# Calculate the range of change_from_1990\ndairy_change_range <- range(dairy_numbers_region$change_from_1990, na.rm = TRUE)\nmax_abs_change <- max(abs(dairy_change_range))\n\n# Define the limits to be symmetric around zero\nsymmetric_limits <- c(-max_abs_change, max_abs_change)\n\n# Create the line plot\nline_plot <- ggplot(dairy_numbers_region, aes(x = year, y = change_from_1990, colour = change_from_1990, group = geography_name)) +\n  geom_line() +\n  geom_point(size = 2) +\n  geom_text(aes(label = geography_name), vjust = -0.5, hjust = 0, size = 4) +\n  labs(title = \"Change in dairy cattle numbers from 1990, by region\",\n       x = \"\",\n       y = \"Number of dairy cattle\") +\n  theme_minimal() +\n  expand_limits(x = c(1990, 2019 + 6)) + # Expand limits on y-axis to match symmetric limits\n  theme(legend.position = \"none\") +\n  scale_color_distiller(\n    palette = \"RdBu\",\n    limits = symmetric_limits,\n    labels = label_comma()) +\n  scale_y_continuous(labels = label_comma()) + # Format y-axis labels with commas\n  transition_reveal(year)\n\n# Create the map plot animation\nmap_plot <- ggplot(map_data) +\n  geom_sf(aes(fill = change_from_1990, geometry = geometry), color = \"black\") +\n  scale_fill_distiller(\n    palette = \"RdBu\",\n    limits = symmetric_limits,\n    labels = label_comma(), \n    name = \"Dairy cattle change \\nfrom 1990\") +\n  theme_void() +\n  theme(legend.position = \"right\") +\n  labs(title = 'Year: {frame_time}') +\n  transition_time(year) +\n  ease_aes('linear')\n\n# Render the individual animations\nline_anim <- animate(line_plot, nframes = 100, fps = 10, end_pause = 30)\nmap_anim <- animate(map_plot, nframes = 100, fps = 10, end_pause = 30)\n\n# Combine the animations side by side using magick\nline_gif <- image_read(line_anim)\nmap_gif <- image_read(map_anim)\ncombined_gif <- image_append(c(line_gif[1], map_gif[1]))\n\n# Ensure both GIFs have the same number of frames\nnum_frames_line <- nrow(image_info(line_gif))\nnum_frames_map <- nrow(image_info(map_gif))\nnum_frames <- min(num_frames_line, num_frames_map)\n\n# Combine the animations side by side\ncombined_gif <- image_append(c(line_gif[1], map_gif[1]), stack = FALSE)\n\nfor (i in 2:num_frames) {\n  combined <- image_append(c(line_gif[i], map_gif[i]), stack = FALSE)\n  combined_gif <- c(combined_gif, combined)\n}\n\n# Add a pause by duplicating the last frame multiple times\npause_duration <- 30 # Number of frames to pause\nlast_frame <- combined_gif[num_frames]\n\nfor (i in 1:pause_duration) {\n  combined_gif <- c(combined_gif, last_frame)\n}\n\n# Display the combined animation\ncombined_gif\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.gif)\n:::\n:::\n\n\n:::\n\n## 2D compare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapboxgl() |>\n  fit_bounds(aps94, animate = FALSE) |>\n  add_fill_layer(id = \"APS 1994\",\n                 source = aps94,\n                 fill_color = interpolate(\n                   column = \"dairydens\",\n                   values = c(0, 420), \n                   stops = c(\"#450C54\", \"#FDE724\"),\n                   na_color = \"lightgrey\",\n                 ),\n                 fill_opacity = 0.8) -> map1\n\nmapboxgl() |> \n  fit_bounds(aps17, animate = FALSE) |>\n  add_fill_layer(id = \"APS 2017\",\n                 source = aps17,\n                 fill_color = interpolate(\n                   column = \"dairydens\",\n                   values = c(0, 420), \n                   stops = c(\"#450C54\", \"#FDE724\"),\n                   na_color = \"lightgrey\",\n                 ),\n                 fill_opacity = 0.8) -> map2\n\n# very hacky way to include the map in the html. See issue at: https://github.com/walkerke/mapgl/issues/3\nhtmlwidgets::saveWidget(compare(map1, map2), \"www/map1.html\")\n```\n:::\n\n```{=html}\n<iframe src=\"www/map1.html\" width = 900 height = 600></iframe>\n```\n\n\n\n## 3D compare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_column <- \"sheepdens\"\nmy_range <- round(range(aps17$sheepdens), 0)\n\nmaplibre(\n  style = maptiler_style('basic'),\n  center = c(170.5, -42.5),\n  zoom = 5.5,\n  pitch = 60,\n  bearing = 0\n) |>\n  add_fill_extrusion_layer(\n    id = \"3d\",\n    source = aps94,\n    fill_extrusion_color = interpolate(\n      column = my_column,\n      values = my_range,\n      stops = c(\"#450C54\", \"#FDE724\")\n    ),\n    fill_extrusion_height = interpolate(\n      column = my_column,\n      values = my_range, # Data values for interpolation\n      stops = c(0, 160000) # Corresponding heights for those values\n    )\n  ) |>\n  add_legend(\"Sheep density <br>1994 / 2017\",\n    values = my_range,\n    colors = c(\"#450C54\", \"#FDE724\")\n  ) -> map3\n\nmaplibre(\n  style = maptiler_style('basic'),\n  center = c(170.5, -42.5),\n  zoom = 5.5,\n  pitch = 60,\n  bearing = 0\n) |>\n  add_fill_extrusion_layer(\n    id = \"3d\",\n    source = aps17,\n    fill_extrusion_color = interpolate(\n      column = my_column,\n      values = my_range,\n      stops = c('#450C54', '#FDE724')\n    ),\n    fill_extrusion_height = interpolate(\n      column = my_column,\n      values = my_range,  # Data values for interpolation\n      stops = c(0, 160000)  # Corresponding heights for those values\n    )\n  ) -> map4\n\n#compare(map3, map4)\n\n# very hacky way to include the map in the html. See issue at: https://github.com/walkerke/mapgl/issues/3\nhtmlwidgets::saveWidget(compare(map3, map4), \"www/map2.html\")\n```\n:::\n\n```{=html}\n<iframe src=\"www/map2.html\" width = 900 height = 600></iframe>\n```\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}